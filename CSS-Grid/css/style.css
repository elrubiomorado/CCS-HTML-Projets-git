:root {
    --azul: #0071b7;
    --blanco: #FFF;
    --naranja: #ff4f1e;
}
html {
    font-size: 62.5%; /** 1REM = 10pX **/
}

body {
    background-color: var(--azul);
    font-family:  'Lato', sans-serif;
    font-size: 1.6rem;
}

.caja-curso {
    background-color: var(--naranja);
    text-align: center;
    color: var(--blanco);
    padding: 5rem;

}
.caja-curso h1 {
    margin: 0;
}
.caja-curso p {
    font-size: 2.4rem;
}
.caja-curso a {
    font-size: 2.4rem;
    padding: 2rem;
    display: inline-block;
    text-decoration: none;
    color: var(--blanco);
    padding: 0;
}


h1, h2 {
    color: var(--blanco);
    text-align: center;
    margin: 5rem 0;
}

.contenedor {
    max-width: 120rem;
    margin: 0 auto;
}
.box {
    background-color: var(--naranja);
    color: var(--blanco);
    padding: 5rem;
    display: flex;
    justify-content: center;
    align-items: center;
}

/** CSS-GRID**/

/** 1 **/
.grid-1{
    /** Display:grid nos permite dividir en columnas y filas el primer nivel de hijos**/
    display: grid;
}

/** 2 **/
.grid-2{
    display: grid;
    /** Grid-template-columns sirve para crear columnas con los elementos que normalmente por default solo tienen 1**/
    grid-template-columns: repeat(4,1fr);
    grid-template-columns: 200px 200px 200px 200px;
}
.grid-2 .box:nth-child(2){
    /** grid-column sirve para posicionar un elemento dentro de la grilla mediante por asi decirlo su cordenada**/
    grid-column-start: 1;
    grid-column-end: 2;
    grid-column: 1 / 2;
}

/** 3 **/
.grid-3{
    display: grid;
    /** grid-template-rows sirve para crear filas dentro de la grilla**/
    grid-template-rows: repeat(6, 1fr);
}
.grid-3 .box:nth-child(2){
    /** grid-row sirve para posicionar un elemento dentro de la grilla**/
    grid-row: 1 / 2;
}

/** 4 **/
.grid-4{
    display: grid;
    grid-template-columns: repeat(3, 300px);
    grid-template-rows: repeat(3, 300px);
}
.grid-4 .box:nth-child(2){
    /** El spam es algo no muy util a mi parecer debido a que lo podemos hacer de la manera que esta a continuacion, basicamente sirve para hacer que un elemento abarque mas de una fila o columna**/
    grid-column: 2 / 4;
    grid-row: 1 / 3;
}

/** 5 **/
.grid-5{
    display: grid;
    /** grid sirve como shorthand para grid-row y grid-column ingresandolos en este orden separados por una barra /**/
    grid: repeat(3,300px) / repeat(2, 300px);
}

/** 6 **/
.grid-6{
    display: grid;
    grid: repeat(2,300px) / repeat(3,300px);
    /**grid-auto-flow sirve para arreglar los saltos de linea al mover un objeto de su posicion**/
    grid-auto-flow: dense;
}
.grid-6 .box:nth-child(2){
    grid-column: 1 / 2;
}

/** 7 **/
.grid-7{
    display: grid;
    /**Repeat() es una funcion que repite una cantidad dandole la cantidad a repetir**/
    /**fr sirve para dar fracciones iguales de tamaño a un elemento**/
    grid: repeat(2, 50rem) / repeat(3, 1fr);
}

/** 8 **/
.grid-8{
    display: grid;
    grid: repeat(2, 20rem) / repeat(3, 1fr);
    /**El gap sirve para tener una separacion entre los elementos de una grilla**/
    column-gap: 5rem;
    row-gap: 5rem;
    gap: 4rem; /**Shorthand, primero el row y luego el column**/
}
.grid-8 .box{
    margin:0;
}

/** 9 **/
.grid-9{
    display: grid;
    height: 120rem;
    /** grid-template areas sirve para crear lugares con los cuales sea mas facil posicionar elementos**/
    grid-template-areas: "header    header     header"
                         "nav       nav        nav"
                         "contenido contenido sidebar"
                         "footer    footer     footer";
    grid-template-columns: repeat(3, 1fr);
    grid-template-rows: 2.5fr 1fr 6fr 2.5fr;
    gap: 4rem;
}
.grid-9 .box:nth-child(1){
    grid-area: header;
}
.grid-9 .box:nth-child(2){
    grid-area: nav;
}
.grid-9 .box:nth-child(3){
    grid-area: contenido;
}
.grid-9 .box:nth-child(4){
    grid-area: sidebar;
}
.grid-9 .box:nth-child(5){
    grid-area: footer ;
}

/** 10 **/
.grid-10{
    display: grid;
    height: 120rem;
    /** grid-template sirve como shorthod a grid-template-areas, grid columns y grid rows**/
    grid-template: "header    header     header" 2.5fr
                         "nav       nav        nav" 1fr
                         "contenido contenido sidebar" 6fr
                         "footer    footer     footer" 2.5fr / 1fr 1fr 1fr
    ;
    gap: 4rem;
}
.grid-10 .box:nth-child(1){
    grid-area: header;
}
.grid-10 .box:nth-child(2){
    grid-area: nav;
}
.grid-10 .box:nth-child(3){
    grid-area: contenido;
}
.grid-10 .box:nth-child(4){
    grid-area: sidebar;
}
.grid-10 .box:nth-child(5){
    grid-area: footer ;
}

/** 11 **/
.grid-11{
    display: flex;
    grid-template-columns: repeat(6, 1fr);
    /** Sirve para alinear el contenido**/
    place-content: center;
    /** Tambien se puede utilizar align-items**/
}

/** 12 **/
.grid-12{
    display: grid;
    /** Autofill llena de columnas aunque no haya contenido**/
    grid-template-columns: repeat(auto-fill, 200px);
    /**Auto-fit detecta la cantidad de elementos y crea columnnas para esos elementos mientras haya el espacio que le asignas**/
    grid-template-columns: repeat(auto-fit, 550px);
    /**min-max sirve para asignar un minimo de tamaño y un maximo**/
    /**Mientras supere al minimo medira el maximo y si se hace mas chiquito medira el minimo**/
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
}